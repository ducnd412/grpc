// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	search.proto

It has these top-level messages:
	Request
	Result
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Request struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Result struct {
	Title   string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Snippet string `protobuf:"bytes,3,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "search.Request")
	proto.RegisterType((*Result)(nil), "search.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Google service

type GoogleClient interface {
	// Search returns a Google search result for the query.
	Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	// Watch returns a stream of Google search results for the query.
	Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (Google_WatchClient, error)
	// BiWatch returns a stream of Google search results for the stream of queries.
	BiWatch(ctx context.Context, opts ...grpc.CallOption) (Google_BiWatchClient, error)
}

type googleClient struct {
	cc *grpc.ClientConn
}

func NewGoogleClient(cc *grpc.ClientConn) GoogleClient {
	return &googleClient{cc}
}

func (c *googleClient) Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/search.Google/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleClient) Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (Google_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Google_serviceDesc.Streams[0], c.cc, "/search.Google/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &googleWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Google_WatchClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type googleWatchClient struct {
	grpc.ClientStream
}

func (x *googleWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *googleClient) BiWatch(ctx context.Context, opts ...grpc.CallOption) (Google_BiWatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Google_serviceDesc.Streams[1], c.cc, "/search.Google/BiWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &googleBiWatchClient{stream}
	return x, nil
}

type Google_BiWatchClient interface {
	Send(*Request) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type googleBiWatchClient struct {
	grpc.ClientStream
}

func (x *googleBiWatchClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *googleBiWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Google service

type GoogleServer interface {
	// Search returns a Google search result for the query.
	Search(context.Context, *Request) (*Result, error)
	// Watch returns a stream of Google search results for the query.
	Watch(*Request, Google_WatchServer) error
	// BiWatch returns a stream of Google search results for the stream of queries.
	BiWatch(Google_BiWatchServer) error
}

func RegisterGoogleServer(s *grpc.Server, srv GoogleServer) {
	s.RegisterService(&_Google_serviceDesc, srv)
}

func _Google_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Google/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServer).Search(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Google_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoogleServer).Watch(m, &googleWatchServer{stream})
}

type Google_WatchServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type googleWatchServer struct {
	grpc.ServerStream
}

func (x *googleWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Google_BiWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoogleServer).BiWatch(&googleBiWatchServer{stream})
}

type Google_BiWatchServer interface {
	Send(*Result) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type googleBiWatchServer struct {
	grpc.ServerStream
}

func (x *googleBiWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *googleBiWatchServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Google_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.Google",
	HandlerType: (*GoogleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Google_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Google_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiWatch",
			Handler:       _Google_BiWatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe4, 0xb9, 0xd8,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x4b, 0x53, 0x8b, 0x2a,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x2f, 0x2e, 0xb6, 0xa0, 0xd4, 0xe2,
	0xd2, 0x1c, 0xb0, 0x7c, 0x49, 0x66, 0x49, 0x4e, 0x2a, 0x4c, 0x1e, 0xcc, 0x11, 0x12, 0xe0, 0x62,
	0x2e, 0x2d, 0xca, 0x91, 0x60, 0x02, 0x8b, 0x81, 0x98, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0x79, 0x99,
	0x05, 0x05, 0xa9, 0x25, 0x12, 0xcc, 0x60, 0x51, 0x18, 0xd7, 0x68, 0x2a, 0x23, 0x17, 0x9b, 0x7b,
	0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x90, 0x36, 0x17, 0x5b, 0x30, 0xd8, 0x05, 0x42, 0xfc, 0x7a, 0x50,
	0x87, 0x41, 0xdd, 0x21, 0xc5, 0x87, 0x10, 0x00, 0xd9, 0xab, 0xc4, 0x20, 0xa4, 0xc3, 0xc5, 0x1a,
	0x9e, 0x58, 0x42, 0x94, 0x5a, 0x03, 0x46, 0x21, 0x03, 0x2e, 0x76, 0xa7, 0x4c, 0x62, 0xd5, 0x6b,
	0x30, 0x1a, 0x30, 0x3a, 0xa9, 0x71, 0xf1, 0x27, 0xe7, 0xe7, 0xea, 0xa5, 0x17, 0x15, 0x24, 0x43,
	0xe5, 0x9d, 0xb8, 0x21, 0xae, 0x0b, 0x00, 0x05, 0x56, 0x00, 0xe3, 0x22, 0x26, 0x66, 0x77, 0x77,
	0x9f, 0x24, 0x36, 0x70, 0xd8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0x9d, 0x76, 0xd3,
	0x4b, 0x01, 0x00, 0x00,
}
